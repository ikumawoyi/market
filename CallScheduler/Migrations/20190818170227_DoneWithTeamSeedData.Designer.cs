// <auto-generated />
using System;
using CallScheduler.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CallScheduler.Migrations
{
    [DbContext(typeof(CallSchedulerDbContext))]
    [Migration("20190818170227_DoneWithTeamSeedData")]
    partial class DoneWithTeamSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("callscheduler")
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CallScheduler.Models.Assigner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssignerCode")
                        .HasColumnName("assignercode");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("datecreated");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<string>("FirstName")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("OtherName")
                        .HasColumnName("othername");

                    b.Property<string>("Passport")
                        .HasColumnName("passport");

                    b.Property<string>("Phone")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("assigners");
                });

            modelBuilder.Entity("CallScheduler.Models.AuditTrail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnName("action")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(256);

                    b.Property<string>("Entity")
                        .HasColumnName("entity")
                        .HasMaxLength(100);

                    b.Property<string>("EntityId")
                        .HasColumnName("entityid")
                        .HasMaxLength(50);

                    b.Property<string>("IPAddress")
                        .HasColumnName("ipaddress")
                        .HasMaxLength(20);

                    b.Property<string>("NewValues")
                        .HasColumnName("newvalues")
                        .HasMaxLength(2000);

                    b.Property<string>("OriginalValues")
                        .HasColumnName("originalvalues")
                        .HasMaxLength(2000);

                    b.Property<string>("Scope")
                        .HasColumnName("scope")
                        .HasMaxLength(100);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnName("timestamp");

                    b.Property<string>("User")
                        .HasColumnName("user")
                        .HasMaxLength(100);

                    b.Property<string>("UserId")
                        .HasColumnName("userid")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("audits");
                });

            modelBuilder.Entity("CallScheduler.Models.Authorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnName("action")
                        .HasMaxLength(40);

                    b.Property<string>("Agent")
                        .HasColumnName("agent")
                        .HasMaxLength(30);

                    b.Property<int>("AuditType")
                        .HasColumnName("audittype");

                    b.Property<DateTime?>("AuthorizeTimestamp")
                        .HasColumnName("authorizetimestamp");

                    b.Property<string>("Authorizer")
                        .HasColumnName("authorizer")
                        .HasMaxLength(25);

                    b.Property<string>("DeclineReason")
                        .HasColumnName("declinereason")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(150);

                    b.Property<string>("EntityId")
                        .HasColumnName("entityid")
                        .HasMaxLength(50);

                    b.Property<string>("EntityJson")
                        .HasColumnName("entityjson")
                        .HasMaxLength(2000);

                    b.Property<string>("EntityType")
                        .HasColumnName("entitytype")
                        .HasMaxLength(30);

                    b.Property<string>("IPAddress")
                        .HasColumnName("ipaddress");

                    b.Property<bool?>("IsApproved")
                        .HasColumnName("isapproved");

                    b.Property<DateTime?>("RequestTimestamp")
                        .HasColumnName("requesttimestamp");

                    b.Property<string>("Requester")
                        .HasColumnName("requester")
                        .HasMaxLength(30);

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("authorizations");
                });

            modelBuilder.Entity("CallScheduler.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address");

                    b.Property<string>("BankCode")
                        .HasColumnName("bankcode");

                    b.Property<string>("BankLogo")
                        .HasColumnName("banklogo");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("datecreated");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasColumnName("phone");

                    b.Property<string>("RcNo")
                        .HasColumnName("rcno")
                        .HasMaxLength(25);

                    b.Property<decimal>("SLAAmount")
                        .HasColumnName("slaamount");

                    b.Property<int>("SLADuration")
                        .HasColumnName("sladuration");

                    b.Property<string>("SLAEndTime")
                        .HasColumnName("slaendtime");

                    b.Property<string>("SLAStartTime")
                        .HasColumnName("slastarttime");

                    b.Property<string>("ShortName")
                        .HasColumnName("shortname");

                    b.HasKey("Id");

                    b.ToTable("banks");
                });

            modelBuilder.Entity("CallScheduler.Models.BankAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankId")
                        .HasColumnName("bankid");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("datecreated");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<string>("FirstName")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("OtherName")
                        .HasColumnName("othername");

                    b.Property<string>("Passport")
                        .HasColumnName("passport");

                    b.Property<string>("Phone")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("bankadmins");
                });

            modelBuilder.Entity("CallScheduler.Models.Call", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignerId")
                        .HasColumnName("assignerid");

                    b.Property<int>("BankId")
                        .HasColumnName("bankid");

                    b.Property<string>("CallOrderNumber")
                        .HasColumnName("callordernumber");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnName("datecompleted");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("datecreated");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<int>("EngineerId")
                        .HasColumnName("engineerid");

                    b.Property<string>("EngineerLocation")
                        .HasColumnName("engineerlocation");

                    b.Property<string>("ErrorCode")
                        .HasColumnName("errorcode");

                    b.Property<string>("ErrorDescription")
                        .HasColumnName("errordescription");

                    b.Property<int>("InitiatorId")
                        .HasColumnName("initiatorid");

                    b.Property<bool>("IsCompleted")
                        .HasColumnName("iscompleted");

                    b.Property<int>("MachineId")
                        .HasColumnName("machineid");

                    b.Property<bool>("MetSLA")
                        .HasColumnName("metsla");

                    b.Property<string>("Parts")
                        .HasColumnName("parts");

                    b.Property<decimal>("SLAAmount")
                        .HasColumnName("slaamount");

                    b.Property<int>("SLADuration")
                        .HasColumnName("sladuration");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AssignerId");

                    b.HasIndex("BankId");

                    b.HasIndex("EngineerId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("MachineId");

                    b.ToTable("calls");
                });

            modelBuilder.Entity("CallScheduler.Models.CallTimeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CallId")
                        .HasColumnName("callid");

                    b.Property<string>("CallOrderNumber")
                        .HasColumnName("callordernumber");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnName("datechanged");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("datecreated");

                    b.Property<string>("EngineerLocation")
                        .HasColumnName("engineerlocation");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CallId");

                    b.ToTable("calltimelines");
                });

            modelBuilder.Entity("CallScheduler.Models.CustomRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrencystamp")
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("datecreated");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("isdeleted");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalizedname")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[normalizedname] IS NOT NULL");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("CallScheduler.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("accessfailedcount");

                    b.Property<string>("AssignerCode")
                        .HasColumnName("assignercode");

                    b.Property<string>("BankCode")
                        .HasColumnName("bankcode");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrencystamp")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("datecreated");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("emailconfirmed");

                    b.Property<string>("EngineerCode")
                        .HasColumnName("engineercode");

                    b.Property<string>("FirstName")
                        .HasColumnName("firstname")
                        .HasMaxLength(256);

                    b.Property<string>("ImageName")
                        .HasColumnName("imagename");

                    b.Property<string>("InitiatorCode")
                        .HasColumnName("initiatorcode");

                    b.Property<bool?>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isdeleted");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnName("lastlogin");

                    b.Property<string>("LastName")
                        .HasColumnName("lastname")
                        .HasMaxLength(256);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockoutenabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockoutend");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalizedemail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalizedusername")
                        .HasMaxLength(256);

                    b.Property<string>("OtherName")
                        .HasColumnName("othername")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phonenumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("RevokedPermissions")
                        .HasColumnName("revokedpermissions")
                        .HasMaxLength(2000);

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("securitystamp");

                    b.Property<string>("TeamLead")
                        .HasColumnName("teamlead");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("twofactorenabled");

                    b.Property<string>("UserName")
                        .HasColumnName("username")
                        .HasMaxLength(256);

                    b.Property<string>("Zone")
                        .HasColumnName("zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[normalizedusername] IS NOT NULL");

                    b.ToTable("users");
                });

            modelBuilder.Entity("CallScheduler.Models.Engineer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("datecreated");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<string>("EngineerCode")
                        .HasColumnName("engineercode");

                    b.Property<string>("FirstName")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("OtherName")
                        .HasColumnName("othername");

                    b.Property<string>("Passport")
                        .HasColumnName("passport");

                    b.Property<string>("Phone")
                        .HasColumnName("phone");

                    b.Property<int>("TeamLeadId")
                        .HasColumnName("teamleadid");

                    b.HasKey("Id");

                    b.HasIndex("TeamLeadId");

                    b.ToTable("engineers");
                });

            modelBuilder.Entity("CallScheduler.Models.InitiatedCall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankId")
                        .HasColumnName("bankid");

                    b.Property<string>("CallOrderNumber")
                        .HasColumnName("callordernumber");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("datecreated");

                    b.Property<string>("ErrorCode")
                        .HasColumnName("errorcode");

                    b.Property<string>("ErrorDescription")
                        .HasColumnName("errordescription");

                    b.Property<int>("InitiatorId")
                        .HasColumnName("initiatorid");

                    b.Property<bool>("IsAssigned")
                        .HasColumnName("isassigned");

                    b.Property<int>("MachineId")
                        .HasColumnName("machineid");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("MachineId");

                    b.ToTable("initiatedcalls");
                });

            modelBuilder.Entity("CallScheduler.Models.Initiator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankId")
                        .HasColumnName("bankid");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("datecreated");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<string>("FirstName")
                        .HasColumnName("firstname");

                    b.Property<string>("InitiatorCode")
                        .HasColumnName("initiatorcode");

                    b.Property<string>("LastName")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("OtherName")
                        .HasColumnName("othername");

                    b.Property<string>("Passport")
                        .HasColumnName("passport");

                    b.Property<string>("Phone")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("initiators");
                });

            modelBuilder.Entity("CallScheduler.Models.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BankId")
                        .HasColumnName("bankid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("datecreated");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<string>("Location")
                        .HasColumnName("location");

                    b.Property<string>("MachineCode")
                        .HasColumnName("machinecode");

                    b.Property<int>("MachineVariantId")
                        .HasColumnName("machinevariantid");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("MachineVariantId");

                    b.ToTable("machines");
                });

            modelBuilder.Entity("CallScheduler.Models.MachineVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("datecreated");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("machinevariants");
                });

            modelBuilder.Entity("CallScheduler.Models.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("datecreated");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<int>("MachineVariantId")
                        .HasColumnName("machinevariantid");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("PartCode")
                        .HasColumnName("partcode");

                    b.HasKey("Id");

                    b.HasIndex("MachineVariantId");

                    b.ToTable("parts");
                });

            modelBuilder.Entity("CallScheduler.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CallId")
                        .HasColumnName("callid");

                    b.Property<string>("CallOrderNumber")
                        .HasColumnName("callordernumber");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("datecreated");

                    b.Property<DateTime>("DateToRun")
                        .HasColumnName("datetorun");

                    b.HasKey("Id");

                    b.ToTable("schedules");
                });

            modelBuilder.Entity("CallScheduler.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("settings");
                });

            modelBuilder.Entity("CallScheduler.Models.TeamLead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("datecreated");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnName("dateupdated");

                    b.Property<string>("FirstName")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("OtherName")
                        .HasColumnName("othername");

                    b.Property<string>("Passport")
                        .HasColumnName("passport");

                    b.Property<string>("Phone")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("teamleads");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claimvalue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnName("roleid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("roleclaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claimvalue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("userid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("userclaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("loginprovider");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("providerkey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("providerdisplayname");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("userid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("userlogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userid");

                    b.Property<string>("RoleId")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("userroles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("userid");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("loginprovider");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("tokens");
                });

            modelBuilder.Entity("CallScheduler.Models.BankAdmin", b =>
                {
                    b.HasOne("CallScheduler.Models.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CallScheduler.Models.Call", b =>
                {
                    b.HasOne("CallScheduler.Models.Assigner", "Assigner")
                        .WithMany("Calls")
                        .HasForeignKey("AssignerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CallScheduler.Models.Bank", "Bank")
                        .WithMany("Calls")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CallScheduler.Models.Engineer", "Engineer")
                        .WithMany("Calls")
                        .HasForeignKey("EngineerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CallScheduler.Models.Initiator", "Initiator")
                        .WithMany("Calls")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CallScheduler.Models.Machine", "Machine")
                        .WithMany("Calls")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CallScheduler.Models.CallTimeline", b =>
                {
                    b.HasOne("CallScheduler.Models.Call", "Call")
                        .WithMany("CallTimelines")
                        .HasForeignKey("CallId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CallScheduler.Models.Engineer", b =>
                {
                    b.HasOne("CallScheduler.Models.TeamLead", "TeamLead")
                        .WithMany("Engineers")
                        .HasForeignKey("TeamLeadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CallScheduler.Models.InitiatedCall", b =>
                {
                    b.HasOne("CallScheduler.Models.Bank", "Bank")
                        .WithMany("InitiatedCalls")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CallScheduler.Models.Initiator", "Initiator")
                        .WithMany("InitiatedCalls")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CallScheduler.Models.Machine", "Machine")
                        .WithMany("InitiatedCalls")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CallScheduler.Models.Initiator", b =>
                {
                    b.HasOne("CallScheduler.Models.Bank", "Bank")
                        .WithMany("Initiators")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CallScheduler.Models.Machine", b =>
                {
                    b.HasOne("CallScheduler.Models.Bank", "Bank")
                        .WithMany("Machines")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CallScheduler.Models.MachineVariant", "MachineVariant")
                        .WithMany("Machines")
                        .HasForeignKey("MachineVariantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CallScheduler.Models.Part", b =>
                {
                    b.HasOne("CallScheduler.Models.MachineVariant", "MachineVariant")
                        .WithMany("Parts")
                        .HasForeignKey("MachineVariantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CallScheduler.Models.CustomRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CallScheduler.Models.CustomUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CallScheduler.Models.CustomUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CallScheduler.Models.CustomRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CallScheduler.Models.CustomUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CallScheduler.Models.CustomUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
